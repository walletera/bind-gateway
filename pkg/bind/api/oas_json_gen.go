// Code generated by ogen, DO NOT EDIT.

package api

import (
	"math/bits"
	"strconv"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"

	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/validate"
)

// Encode implements json.Marshaler.
func (s *ApiError) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ApiError) encodeFields(e *jx.Encoder) {
	{
		if s.EventId.Set {
			e.FieldStart("eventId")
			s.EventId.Encode(e)
		}
	}
	{
		if s.Detalle.Set {
			e.FieldStart("detalle")
			s.Detalle.Encode(e)
		}
	}
	{
		if s.CorrelationId.Set {
			e.FieldStart("correlationId")
			s.CorrelationId.Encode(e)
		}
	}
	{
		if s.Errores != nil {
			e.FieldStart("errores")
			e.ArrStart()
			for _, elem := range s.Errores {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfApiError = [4]string{
	0: "eventId",
	1: "detalle",
	2: "correlationId",
	3: "errores",
}

// Decode decodes ApiError from json.
func (s *ApiError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ApiError to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "eventId":
			if err := func() error {
				s.EventId.Reset()
				if err := s.EventId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"eventId\"")
			}
		case "detalle":
			if err := func() error {
				s.Detalle.Reset()
				if err := s.Detalle.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"detalle\"")
			}
		case "correlationId":
			if err := func() error {
				s.CorrelationId.Reset()
				if err := s.CorrelationId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"correlationId\"")
			}
		case "errores":
			if err := func() error {
				s.Errores = make([]ApiErrorErroresItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ApiErrorErroresItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Errores = append(s.Errores, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"errores\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ApiError")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ApiError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ApiError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ApiErrorErroresItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ApiErrorErroresItem) encodeFields(e *jx.Encoder) {
	{
		if s.Codigo.Set {
			e.FieldStart("codigo")
			s.Codigo.Encode(e)
		}
	}
	{
		if s.Titulo.Set {
			e.FieldStart("titulo")
			s.Titulo.Encode(e)
		}
	}
	{
		if s.Detalle.Set {
			e.FieldStart("detalle")
			s.Detalle.Encode(e)
		}
	}
}

var jsonFieldsNameOfApiErrorErroresItem = [3]string{
	0: "codigo",
	1: "titulo",
	2: "detalle",
}

// Decode decodes ApiErrorErroresItem from json.
func (s *ApiErrorErroresItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ApiErrorErroresItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "codigo":
			if err := func() error {
				s.Codigo.Reset()
				if err := s.Codigo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"codigo\"")
			}
		case "titulo":
			if err := func() error {
				s.Titulo.Reset()
				if err := s.Titulo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"titulo\"")
			}
		case "detalle":
			if err := func() error {
				s.Detalle.Reset()
				if err := s.Detalle.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"detalle\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ApiErrorErroresItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ApiErrorErroresItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ApiErrorErroresItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreateTransferBadRequest as json.
func (s *CreateTransferBadRequest) Encode(e *jx.Encoder) {
	unwrapped := (*ApiError)(s)

	unwrapped.Encode(e)
}

// Decode decodes CreateTransferBadRequest from json.
func (s *CreateTransferBadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreateTransferBadRequest to nil")
	}
	var unwrapped ApiError
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = CreateTransferBadRequest(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CreateTransferBadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreateTransferBadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CreateTransferRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CreateTransferRequest) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("cvuOrigen")
		e.Str(s.CvuOrigen)
	}
	{
		if s.CbuCvuDestino.Set {
			e.FieldStart("cbu_cvu_destino")
			s.CbuCvuDestino.Encode(e)
		}
	}
	{
		if s.CuitDestino.Set {
			e.FieldStart("cuit_destino")
			s.CuitDestino.Encode(e)
		}
	}
	{
		if s.AliasDestino.Set {
			e.FieldStart("alias_destino")
			s.AliasDestino.Encode(e)
		}
	}
	{
		e.FieldStart("importe")
		e.Float64(s.Importe)
	}
	{
		if s.Referencia.Set {
			e.FieldStart("referencia")
			s.Referencia.Encode(e)
		}
	}
	{
		if s.Concepto.Set {
			e.FieldStart("concepto")
			s.Concepto.Encode(e)
		}
	}
	{
		if s.Emails != nil {
			e.FieldStart("emails")
			e.ArrStart()
			for _, elem := range s.Emails {
				if len(elem) != 0 {
					e.Raw(elem)
				}
			}
			e.ArrEnd()
		}
	}
	{
		if s.IdExterno.Set {
			e.FieldStart("idExterno")
			s.IdExterno.Encode(e)
		}
	}
}

var jsonFieldsNameOfCreateTransferRequest = [9]string{
	0: "cvuOrigen",
	1: "cbu_cvu_destino",
	2: "cuit_destino",
	3: "alias_destino",
	4: "importe",
	5: "referencia",
	6: "concepto",
	7: "emails",
	8: "idExterno",
}

// Decode decodes CreateTransferRequest from json.
func (s *CreateTransferRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreateTransferRequest to nil")
	}
	var requiredBitSet [2]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "cvuOrigen":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.CvuOrigen = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cvuOrigen\"")
			}
		case "cbu_cvu_destino":
			if err := func() error {
				s.CbuCvuDestino.Reset()
				if err := s.CbuCvuDestino.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cbu_cvu_destino\"")
			}
		case "cuit_destino":
			if err := func() error {
				s.CuitDestino.Reset()
				if err := s.CuitDestino.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cuit_destino\"")
			}
		case "alias_destino":
			if err := func() error {
				s.AliasDestino.Reset()
				if err := s.AliasDestino.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"alias_destino\"")
			}
		case "importe":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				v, err := d.Float64()
				s.Importe = float64(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"importe\"")
			}
		case "referencia":
			if err := func() error {
				s.Referencia.Reset()
				if err := s.Referencia.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"referencia\"")
			}
		case "concepto":
			if err := func() error {
				s.Concepto.Reset()
				if err := s.Concepto.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"concepto\"")
			}
		case "emails":
			if err := func() error {
				s.Emails = make([]jx.Raw, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem jx.Raw
					v, err := d.RawAppend(nil)
					elem = jx.Raw(v)
					if err != nil {
						return err
					}
					s.Emails = append(s.Emails, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"emails\"")
			}
		case "idExterno":
			if err := func() error {
				s.IdExterno.Reset()
				if err := s.IdExterno.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"idExterno\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CreateTransferRequest")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [2]uint8{
		0b00010001,
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfCreateTransferRequest) {
					name = jsonFieldsNameOfCreateTransferRequest[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CreateTransferRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreateTransferRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CreateTransferResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CreateTransferResponse) encodeFields(e *jx.Encoder) {
	{
		if s.OperacionId.Set {
			e.FieldStart("operacionId")
			s.OperacionId.Encode(e)
		}
	}
	{
		if s.OperacionIdExterno.Set {
			e.FieldStart("operacionIdExterno")
			s.OperacionIdExterno.Encode(e)
		}
	}
	{
		if s.EstadoExterno.Set {
			e.FieldStart("estadoExterno")
			s.EstadoExterno.Encode(e)
		}
	}
	{
		if s.EstadoId.Set {
			e.FieldStart("estadoId")
			s.EstadoId.Encode(e)
		}
	}
	{
		if s.OrigenCuentaId.Set {
			e.FieldStart("origenCuentaId")
			s.OrigenCuentaId.Encode(e)
		}
	}
	{
		if s.CoelsaId.Set {
			e.FieldStart("coelsaId")
			s.CoelsaId.Encode(e)
		}
	}
	{
		if s.FechaInicio.Set {
			e.FieldStart("fechaInicio")
			s.FechaInicio.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.FechaFin.Set {
			e.FieldStart("fechaFin")
			s.FechaFin.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.FechaNegocio.Set {
			e.FieldStart("fechaNegocio")
			s.FechaNegocio.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.Importe.Set {
			e.FieldStart("importe")
			s.Importe.Encode(e)
		}
	}
	{
		if s.CvuOrigen.Set {
			e.FieldStart("cvuOrigen")
			s.CvuOrigen.Encode(e)
		}
	}
	{
		if s.Referencia.Set {
			e.FieldStart("referencia")
			s.Referencia.Encode(e)
		}
	}
	{
		if s.Concepto.Set {
			e.FieldStart("concepto")
			s.Concepto.Encode(e)
		}
	}
	{
		if s.CvuCbuContraparte.Set {
			e.FieldStart("cvuCbuContraparte")
			s.CvuCbuContraparte.Encode(e)
		}
	}
	{
		if s.AliasContraparte.Set {
			e.FieldStart("aliasContraparte")
			s.AliasContraparte.Encode(e)
		}
	}
	{
		if s.NombreContraparte.Set {
			e.FieldStart("nombreContraparte")
			s.NombreContraparte.Encode(e)
		}
	}
	{
		if s.CuitCuilContraparte.Set {
			e.FieldStart("cuitCuilContraparte")
			s.CuitCuilContraparte.Encode(e)
		}
	}
	{
		if s.ComprobanteId.Set {
			e.FieldStart("comprobanteId")
			s.ComprobanteId.Encode(e)
		}
	}
	{
		if s.ComprobanteDevolucionId.Set {
			e.FieldStart("comprobanteDevolucionId")
			s.ComprobanteDevolucionId.Encode(e)
		}
	}
	{
		if s.MensajeAdicional.Set {
			e.FieldStart("mensajeAdicional")
			s.MensajeAdicional.Encode(e)
		}
	}
	{
		if s.EsTransferenciaInterna.Set {
			e.FieldStart("esTransferenciaInterna")
			s.EsTransferenciaInterna.Encode(e)
		}
	}
	{
		if s.EstaFinalizada.Set {
			e.FieldStart("estaFinalizada")
			s.EstaFinalizada.Encode(e)
		}
	}
	{
		if s.EstaRechazada.Set {
			e.FieldStart("estaRechazada")
			s.EstaRechazada.Encode(e)
		}
	}
	{
		if s.EstaAAuditar.Set {
			e.FieldStart("estaAAuditar")
			s.EstaAAuditar.Encode(e)
		}
	}
	{
		if s.EstaPendiente.Set {
			e.FieldStart("estaPendiente")
			s.EstaPendiente.Encode(e)
		}
	}
}

var jsonFieldsNameOfCreateTransferResponse = [25]string{
	0:  "operacionId",
	1:  "operacionIdExterno",
	2:  "estadoExterno",
	3:  "estadoId",
	4:  "origenCuentaId",
	5:  "coelsaId",
	6:  "fechaInicio",
	7:  "fechaFin",
	8:  "fechaNegocio",
	9:  "importe",
	10: "cvuOrigen",
	11: "referencia",
	12: "concepto",
	13: "cvuCbuContraparte",
	14: "aliasContraparte",
	15: "nombreContraparte",
	16: "cuitCuilContraparte",
	17: "comprobanteId",
	18: "comprobanteDevolucionId",
	19: "mensajeAdicional",
	20: "esTransferenciaInterna",
	21: "estaFinalizada",
	22: "estaRechazada",
	23: "estaAAuditar",
	24: "estaPendiente",
}

// Decode decodes CreateTransferResponse from json.
func (s *CreateTransferResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreateTransferResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "operacionId":
			if err := func() error {
				s.OperacionId.Reset()
				if err := s.OperacionId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"operacionId\"")
			}
		case "operacionIdExterno":
			if err := func() error {
				s.OperacionIdExterno.Reset()
				if err := s.OperacionIdExterno.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"operacionIdExterno\"")
			}
		case "estadoExterno":
			if err := func() error {
				s.EstadoExterno.Reset()
				if err := s.EstadoExterno.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"estadoExterno\"")
			}
		case "estadoId":
			if err := func() error {
				s.EstadoId.Reset()
				if err := s.EstadoId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"estadoId\"")
			}
		case "origenCuentaId":
			if err := func() error {
				s.OrigenCuentaId.Reset()
				if err := s.OrigenCuentaId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"origenCuentaId\"")
			}
		case "coelsaId":
			if err := func() error {
				s.CoelsaId.Reset()
				if err := s.CoelsaId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"coelsaId\"")
			}
		case "fechaInicio":
			if err := func() error {
				s.FechaInicio.Reset()
				if err := s.FechaInicio.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fechaInicio\"")
			}
		case "fechaFin":
			if err := func() error {
				s.FechaFin.Reset()
				if err := s.FechaFin.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fechaFin\"")
			}
		case "fechaNegocio":
			if err := func() error {
				s.FechaNegocio.Reset()
				if err := s.FechaNegocio.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fechaNegocio\"")
			}
		case "importe":
			if err := func() error {
				s.Importe.Reset()
				if err := s.Importe.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"importe\"")
			}
		case "cvuOrigen":
			if err := func() error {
				s.CvuOrigen.Reset()
				if err := s.CvuOrigen.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cvuOrigen\"")
			}
		case "referencia":
			if err := func() error {
				s.Referencia.Reset()
				if err := s.Referencia.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"referencia\"")
			}
		case "concepto":
			if err := func() error {
				s.Concepto.Reset()
				if err := s.Concepto.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"concepto\"")
			}
		case "cvuCbuContraparte":
			if err := func() error {
				s.CvuCbuContraparte.Reset()
				if err := s.CvuCbuContraparte.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cvuCbuContraparte\"")
			}
		case "aliasContraparte":
			if err := func() error {
				s.AliasContraparte.Reset()
				if err := s.AliasContraparte.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"aliasContraparte\"")
			}
		case "nombreContraparte":
			if err := func() error {
				s.NombreContraparte.Reset()
				if err := s.NombreContraparte.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"nombreContraparte\"")
			}
		case "cuitCuilContraparte":
			if err := func() error {
				s.CuitCuilContraparte.Reset()
				if err := s.CuitCuilContraparte.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cuitCuilContraparte\"")
			}
		case "comprobanteId":
			if err := func() error {
				s.ComprobanteId.Reset()
				if err := s.ComprobanteId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"comprobanteId\"")
			}
		case "comprobanteDevolucionId":
			if err := func() error {
				s.ComprobanteDevolucionId.Reset()
				if err := s.ComprobanteDevolucionId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"comprobanteDevolucionId\"")
			}
		case "mensajeAdicional":
			if err := func() error {
				s.MensajeAdicional.Reset()
				if err := s.MensajeAdicional.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"mensajeAdicional\"")
			}
		case "esTransferenciaInterna":
			if err := func() error {
				s.EsTransferenciaInterna.Reset()
				if err := s.EsTransferenciaInterna.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"esTransferenciaInterna\"")
			}
		case "estaFinalizada":
			if err := func() error {
				s.EstaFinalizada.Reset()
				if err := s.EstaFinalizada.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"estaFinalizada\"")
			}
		case "estaRechazada":
			if err := func() error {
				s.EstaRechazada.Reset()
				if err := s.EstaRechazada.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"estaRechazada\"")
			}
		case "estaAAuditar":
			if err := func() error {
				s.EstaAAuditar.Reset()
				if err := s.EstaAAuditar.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"estaAAuditar\"")
			}
		case "estaPendiente":
			if err := func() error {
				s.EstaPendiente.Reset()
				if err := s.EstaPendiente.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"estaPendiente\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CreateTransferResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CreateTransferResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreateTransferResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreateTransferResponseEstadoExterno as json.
func (s CreateTransferResponseEstadoExterno) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CreateTransferResponseEstadoExterno from json.
func (s *CreateTransferResponseEstadoExterno) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreateTransferResponseEstadoExterno to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CreateTransferResponseEstadoExterno(v) {
	case CreateTransferResponseEstadoExternoUNKNOWN:
		*s = CreateTransferResponseEstadoExternoUNKNOWN
	case CreateTransferResponseEstadoExternoINPROGRESS:
		*s = CreateTransferResponseEstadoExternoINPROGRESS
	case CreateTransferResponseEstadoExternoUNKNOWNFOREVER:
		*s = CreateTransferResponseEstadoExternoUNKNOWNFOREVER
	case CreateTransferResponseEstadoExternoCOMPLETED:
		*s = CreateTransferResponseEstadoExternoCOMPLETED
	case CreateTransferResponseEstadoExternoFAILED:
		*s = CreateTransferResponseEstadoExternoFAILED
	default:
		*s = CreateTransferResponseEstadoExterno(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CreateTransferResponseEstadoExterno) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreateTransferResponseEstadoExterno) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreateTransferResponseEstadoId as json.
func (s CreateTransferResponseEstadoId) Encode(e *jx.Encoder) {
	e.Int(int(s))
}

// Decode decodes CreateTransferResponseEstadoId from json.
func (s *CreateTransferResponseEstadoId) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreateTransferResponseEstadoId to nil")
	}
	v, err := d.Int()
	if err != nil {
		return err
	}
	*s = CreateTransferResponseEstadoId(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CreateTransferResponseEstadoId) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreateTransferResponseEstadoId) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreateTransferUnprocessableEntity as json.
func (s *CreateTransferUnprocessableEntity) Encode(e *jx.Encoder) {
	unwrapped := (*ApiError)(s)

	unwrapped.Encode(e)
}

// Decode decodes CreateTransferUnprocessableEntity from json.
func (s *CreateTransferUnprocessableEntity) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreateTransferUnprocessableEntity to nil")
	}
	var unwrapped ApiError
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = CreateTransferUnprocessableEntity(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CreateTransferUnprocessableEntity) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreateTransferUnprocessableEntity) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes bool as json.
func (o OptBool) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Bool(bool(o.Value))
}

// Decode decodes bool from json.
func (o *OptBool) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptBool to nil")
	}
	o.Set = true
	v, err := d.Bool()
	if err != nil {
		return err
	}
	o.Value = bool(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptBool) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptBool) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreateTransferResponseEstadoExterno as json.
func (o OptCreateTransferResponseEstadoExterno) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CreateTransferResponseEstadoExterno from json.
func (o *OptCreateTransferResponseEstadoExterno) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCreateTransferResponseEstadoExterno to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCreateTransferResponseEstadoExterno) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCreateTransferResponseEstadoExterno) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreateTransferResponseEstadoId as json.
func (o OptCreateTransferResponseEstadoId) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Int(int(o.Value))
}

// Decode decodes CreateTransferResponseEstadoId from json.
func (o *OptCreateTransferResponseEstadoId) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCreateTransferResponseEstadoId to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCreateTransferResponseEstadoId) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCreateTransferResponseEstadoId) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes time.Time as json.
func (o OptDateTime) Encode(e *jx.Encoder, format func(*jx.Encoder, time.Time)) {
	if !o.Set {
		return
	}
	format(e, o.Value)
}

// Decode decodes time.Time from json.
func (o *OptDateTime) Decode(d *jx.Decoder, format func(*jx.Decoder) (time.Time, error)) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptDateTime to nil")
	}
	o.Set = true
	v, err := format(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptDateTime) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e, json.EncodeDateTime)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptDateTime) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d, json.DecodeDateTime)
}

// Encode encodes float64 as json.
func (o OptFloat64) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Float64(float64(o.Value))
}

// Decode decodes float64 from json.
func (o *OptFloat64) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptFloat64 to nil")
	}
	o.Set = true
	v, err := d.Float64()
	if err != nil {
		return err
	}
	o.Value = float64(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptFloat64) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptFloat64) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int as json.
func (o OptInt) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Int(int(o.Value))
}

// Decode decodes int from json.
func (o *OptInt) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptInt to nil")
	}
	o.Set = true
	v, err := d.Int()
	if err != nil {
		return err
	}
	o.Value = int(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptInt) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptInt) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes string as json.
func (o OptString) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes string from json.
func (o *OptString) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptString to nil")
	}
	o.Set = true
	v, err := d.Str()
	if err != nil {
		return err
	}
	o.Value = string(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptString) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptString) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}
