// Code generated by ogen, DO NOT EDIT.

package api

import (
	"github.com/go-faster/errors"
	"github.com/google/uuid"
)

// A Bank or PSP account.
// Ref: #/components/schemas/account
type Account struct {
	// Walletera account unique identifier.
	ID uuid.UUID `json:"id"`
	// Account currency.
	Currency string `json:"currency"`
	// Id of the customer (institution) that owns the account.
	CustomerId uuid.UUID `json:"customerId"`
	// Name of the customer (institution) that owns the account.
	CustomerName OptString `json:"customerName"`
	// Identifier assigned to the account by the customer.
	CustomerAccountId OptString          `json:"customerAccountId"`
	AccountType       AccountAccountType `json:"accountType"`
	// Extra account details. The details depend on the accountType.
	AccountDetails AccountAccountDetails `json:"accountDetails"`
}

// GetID returns the value of ID.
func (s *Account) GetID() uuid.UUID {
	return s.ID
}

// GetCurrency returns the value of Currency.
func (s *Account) GetCurrency() string {
	return s.Currency
}

// GetCustomerId returns the value of CustomerId.
func (s *Account) GetCustomerId() uuid.UUID {
	return s.CustomerId
}

// GetCustomerName returns the value of CustomerName.
func (s *Account) GetCustomerName() OptString {
	return s.CustomerName
}

// GetCustomerAccountId returns the value of CustomerAccountId.
func (s *Account) GetCustomerAccountId() OptString {
	return s.CustomerAccountId
}

// GetAccountType returns the value of AccountType.
func (s *Account) GetAccountType() AccountAccountType {
	return s.AccountType
}

// GetAccountDetails returns the value of AccountDetails.
func (s *Account) GetAccountDetails() AccountAccountDetails {
	return s.AccountDetails
}

// SetID sets the value of ID.
func (s *Account) SetID(val uuid.UUID) {
	s.ID = val
}

// SetCurrency sets the value of Currency.
func (s *Account) SetCurrency(val string) {
	s.Currency = val
}

// SetCustomerId sets the value of CustomerId.
func (s *Account) SetCustomerId(val uuid.UUID) {
	s.CustomerId = val
}

// SetCustomerName sets the value of CustomerName.
func (s *Account) SetCustomerName(val OptString) {
	s.CustomerName = val
}

// SetCustomerAccountId sets the value of CustomerAccountId.
func (s *Account) SetCustomerAccountId(val OptString) {
	s.CustomerAccountId = val
}

// SetAccountType sets the value of AccountType.
func (s *Account) SetAccountType(val AccountAccountType) {
	s.AccountType = val
}

// SetAccountDetails sets the value of AccountDetails.
func (s *Account) SetAccountDetails(val AccountAccountDetails) {
	s.AccountDetails = val
}

func (*Account) postAccountRes() {}

// Extra account details. The details depend on the accountType.
type AccountAccountDetails struct {
	OneOf AccountAccountDetailsSum
}

// GetOneOf returns the value of OneOf.
func (s *AccountAccountDetails) GetOneOf() AccountAccountDetailsSum {
	return s.OneOf
}

// SetOneOf sets the value of OneOf.
func (s *AccountAccountDetails) SetOneOf(val AccountAccountDetailsSum) {
	s.OneOf = val
}

// AccountAccountDetailsSum represents sum type.
type AccountAccountDetailsSum struct {
	Type                  AccountAccountDetailsSumType // switch on this field
	CvuAccountDetails     CvuAccountDetails
	DinopayAccountDetails DinopayAccountDetails
}

// AccountAccountDetailsSumType is oneOf type of AccountAccountDetailsSum.
type AccountAccountDetailsSumType string

// Possible values for AccountAccountDetailsSumType.
const (
	CvuAccountDetailsAccountAccountDetailsSum     AccountAccountDetailsSumType = "CvuAccountDetails"
	DinopayAccountDetailsAccountAccountDetailsSum AccountAccountDetailsSumType = "DinopayAccountDetails"
)

// IsCvuAccountDetails reports whether AccountAccountDetailsSum is CvuAccountDetails.
func (s AccountAccountDetailsSum) IsCvuAccountDetails() bool {
	return s.Type == CvuAccountDetailsAccountAccountDetailsSum
}

// IsDinopayAccountDetails reports whether AccountAccountDetailsSum is DinopayAccountDetails.
func (s AccountAccountDetailsSum) IsDinopayAccountDetails() bool {
	return s.Type == DinopayAccountDetailsAccountAccountDetailsSum
}

// SetCvuAccountDetails sets AccountAccountDetailsSum to CvuAccountDetails.
func (s *AccountAccountDetailsSum) SetCvuAccountDetails(v CvuAccountDetails) {
	s.Type = CvuAccountDetailsAccountAccountDetailsSum
	s.CvuAccountDetails = v
}

// GetCvuAccountDetails returns CvuAccountDetails and true boolean if AccountAccountDetailsSum is CvuAccountDetails.
func (s AccountAccountDetailsSum) GetCvuAccountDetails() (v CvuAccountDetails, ok bool) {
	if !s.IsCvuAccountDetails() {
		return v, false
	}
	return s.CvuAccountDetails, true
}

// NewCvuAccountDetailsAccountAccountDetailsSum returns new AccountAccountDetailsSum from CvuAccountDetails.
func NewCvuAccountDetailsAccountAccountDetailsSum(v CvuAccountDetails) AccountAccountDetailsSum {
	var s AccountAccountDetailsSum
	s.SetCvuAccountDetails(v)
	return s
}

// SetDinopayAccountDetails sets AccountAccountDetailsSum to DinopayAccountDetails.
func (s *AccountAccountDetailsSum) SetDinopayAccountDetails(v DinopayAccountDetails) {
	s.Type = DinopayAccountDetailsAccountAccountDetailsSum
	s.DinopayAccountDetails = v
}

// GetDinopayAccountDetails returns DinopayAccountDetails and true boolean if AccountAccountDetailsSum is DinopayAccountDetails.
func (s AccountAccountDetailsSum) GetDinopayAccountDetails() (v DinopayAccountDetails, ok bool) {
	if !s.IsDinopayAccountDetails() {
		return v, false
	}
	return s.DinopayAccountDetails, true
}

// NewDinopayAccountDetailsAccountAccountDetailsSum returns new AccountAccountDetailsSum from DinopayAccountDetails.
func NewDinopayAccountDetailsAccountAccountDetailsSum(v DinopayAccountDetails) AccountAccountDetailsSum {
	var s AccountAccountDetailsSum
	s.SetDinopayAccountDetails(v)
	return s
}

type AccountAccountType string

const (
	AccountAccountTypeCvu     AccountAccountType = "cvu"
	AccountAccountTypeDinopay AccountAccountType = "dinopay"
)

// AllValues returns all AccountAccountType values.
func (AccountAccountType) AllValues() []AccountAccountType {
	return []AccountAccountType{
		AccountAccountTypeCvu,
		AccountAccountTypeDinopay,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AccountAccountType) MarshalText() ([]byte, error) {
	switch s {
	case AccountAccountTypeCvu:
		return []byte(s), nil
	case AccountAccountTypeDinopay:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AccountAccountType) UnmarshalText(data []byte) error {
	switch AccountAccountType(data) {
	case AccountAccountTypeCvu:
		*s = AccountAccountTypeCvu
		return nil
	case AccountAccountTypeDinopay:
		*s = AccountAccountTypeDinopay
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Body of the error responses.
// Ref: #/components/schemas/apiError
type ApiError struct {
	// A message describing the error.
	ErrorMessage string `json:"errorMessage"`
	// A unique identifier for the specific error.
	ErrorCode uuid.UUID `json:"errorCode"`
}

// GetErrorMessage returns the value of ErrorMessage.
func (s *ApiError) GetErrorMessage() string {
	return s.ErrorMessage
}

// GetErrorCode returns the value of ErrorCode.
func (s *ApiError) GetErrorCode() uuid.UUID {
	return s.ErrorCode
}

// SetErrorMessage sets the value of ErrorMessage.
func (s *ApiError) SetErrorMessage(val string) {
	s.ErrorMessage = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *ApiError) SetErrorCode(val uuid.UUID) {
	s.ErrorCode = val
}

// Ref: #/components/schemas/cvuAccountDetails
type CvuAccountDetails struct {
	// Account owner national identification number.
	Cuit  OptString `json:"cuit"`
	Cvu   OptString `json:"cvu"`
	Alias OptString `json:"alias"`
}

// GetCuit returns the value of Cuit.
func (s *CvuAccountDetails) GetCuit() OptString {
	return s.Cuit
}

// GetCvu returns the value of Cvu.
func (s *CvuAccountDetails) GetCvu() OptString {
	return s.Cvu
}

// GetAlias returns the value of Alias.
func (s *CvuAccountDetails) GetAlias() OptString {
	return s.Alias
}

// SetCuit sets the value of Cuit.
func (s *CvuAccountDetails) SetCuit(val OptString) {
	s.Cuit = val
}

// SetCvu sets the value of Cvu.
func (s *CvuAccountDetails) SetCvu(val OptString) {
	s.Cvu = val
}

// SetAlias sets the value of Alias.
func (s *CvuAccountDetails) SetAlias(val OptString) {
	s.Alias = val
}

// Ref: #/components/schemas/dinopayAccountDetails
type DinopayAccountDetails struct {
	// Name of the owner of the account.
	AccountHolder string `json:"accountHolder"`
	// Account number on DinoPay.
	AccountNumber string `json:"accountNumber"`
}

// GetAccountHolder returns the value of AccountHolder.
func (s *DinopayAccountDetails) GetAccountHolder() string {
	return s.AccountHolder
}

// GetAccountNumber returns the value of AccountNumber.
func (s *DinopayAccountDetails) GetAccountNumber() string {
	return s.AccountNumber
}

// SetAccountHolder sets the value of AccountHolder.
func (s *DinopayAccountDetails) SetAccountHolder(val string) {
	s.AccountHolder = val
}

// SetAccountNumber sets the value of AccountNumber.
func (s *DinopayAccountDetails) SetAccountNumber(val string) {
	s.AccountNumber = val
}

type GetAccountAccountType string

const (
	GetAccountAccountTypeCvu     GetAccountAccountType = "cvu"
	GetAccountAccountTypeDinopay GetAccountAccountType = "dinopay"
)

// AllValues returns all GetAccountAccountType values.
func (GetAccountAccountType) AllValues() []GetAccountAccountType {
	return []GetAccountAccountType{
		GetAccountAccountTypeCvu,
		GetAccountAccountTypeDinopay,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetAccountAccountType) MarshalText() ([]byte, error) {
	switch s {
	case GetAccountAccountTypeCvu:
		return []byte(s), nil
	case GetAccountAccountTypeDinopay:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetAccountAccountType) UnmarshalText(data []byte) error {
	switch GetAccountAccountType(data) {
	case GetAccountAccountTypeCvu:
		*s = GetAccountAccountTypeCvu
		return nil
	case GetAccountAccountTypeDinopay:
		*s = GetAccountAccountTypeDinopay
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// GetAccountNotFound is response for GetAccount operation.
type GetAccountNotFound struct{}

func (*GetAccountNotFound) getAccountRes() {}

type GetAccountOKApplicationJSON []Account

func (*GetAccountOKApplicationJSON) getAccountRes() {}

// NewOptCvuAccountDetails returns new OptCvuAccountDetails with value set to v.
func NewOptCvuAccountDetails(v CvuAccountDetails) OptCvuAccountDetails {
	return OptCvuAccountDetails{
		Value: v,
		Set:   true,
	}
}

// OptCvuAccountDetails is optional CvuAccountDetails.
type OptCvuAccountDetails struct {
	Value CvuAccountDetails
	Set   bool
}

// IsSet returns true if OptCvuAccountDetails was set.
func (o OptCvuAccountDetails) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCvuAccountDetails) Reset() {
	var v CvuAccountDetails
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCvuAccountDetails) SetTo(v CvuAccountDetails) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCvuAccountDetails) Get() (v CvuAccountDetails, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCvuAccountDetails) Or(d CvuAccountDetails) CvuAccountDetails {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDinopayAccountDetails returns new OptDinopayAccountDetails with value set to v.
func NewOptDinopayAccountDetails(v DinopayAccountDetails) OptDinopayAccountDetails {
	return OptDinopayAccountDetails{
		Value: v,
		Set:   true,
	}
}

// OptDinopayAccountDetails is optional DinopayAccountDetails.
type OptDinopayAccountDetails struct {
	Value DinopayAccountDetails
	Set   bool
}

// IsSet returns true if OptDinopayAccountDetails was set.
func (o OptDinopayAccountDetails) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDinopayAccountDetails) Reset() {
	var v DinopayAccountDetails
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDinopayAccountDetails) SetTo(v DinopayAccountDetails) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDinopayAccountDetails) Get() (v DinopayAccountDetails, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDinopayAccountDetails) Or(d DinopayAccountDetails) DinopayAccountDetails {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetAccountAccountType returns new OptGetAccountAccountType with value set to v.
func NewOptGetAccountAccountType(v GetAccountAccountType) OptGetAccountAccountType {
	return OptGetAccountAccountType{
		Value: v,
		Set:   true,
	}
}

// OptGetAccountAccountType is optional GetAccountAccountType.
type OptGetAccountAccountType struct {
	Value GetAccountAccountType
	Set   bool
}

// IsSet returns true if OptGetAccountAccountType was set.
func (o OptGetAccountAccountType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetAccountAccountType) Reset() {
	var v GetAccountAccountType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetAccountAccountType) SetTo(v GetAccountAccountType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetAccountAccountType) Get() (v GetAccountAccountType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetAccountAccountType) Or(d GetAccountAccountType) GetAccountAccountType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUUID returns new OptUUID with value set to v.
func NewOptUUID(v uuid.UUID) OptUUID {
	return OptUUID{
		Value: v,
		Set:   true,
	}
}

// OptUUID is optional uuid.UUID.
type OptUUID struct {
	Value uuid.UUID
	Set   bool
}

// IsSet returns true if OptUUID was set.
func (o OptUUID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUUID) Reset() {
	var v uuid.UUID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUUID) SetTo(v uuid.UUID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUUID) Get() (v uuid.UUID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUUID) Or(d uuid.UUID) uuid.UUID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

type PostAccountBadRequest ApiError

func (*PostAccountBadRequest) postAccountRes() {}

type PostAccountConflict ApiError

func (*PostAccountConflict) postAccountRes() {}

type PostAccountInternalServerError ApiError

func (*PostAccountInternalServerError) postAccountRes() {}

// PostAccountUnauthorized is response for PostAccount operation.
type PostAccountUnauthorized struct{}

func (*PostAccountUnauthorized) postAccountRes() {}
