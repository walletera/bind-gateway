// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"

	"github.com/google/uuid"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
)

// GetAccountParams is parameters of getAccount operation.
type GetAccountParams struct {
	AccountType           OptGetAccountAccountType
	CvuAccountDetails     OptCvuAccountDetails
	DinopayAccountDetails OptDinopayAccountDetails
}

func unpackGetAccountParams(packed middleware.Parameters) (params GetAccountParams) {
	{
		key := middleware.ParameterKey{
			Name: "accountType",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.AccountType = v.(OptGetAccountAccountType)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "cvuAccountDetails",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.CvuAccountDetails = v.(OptCvuAccountDetails)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "dinopayAccountDetails",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.DinopayAccountDetails = v.(OptDinopayAccountDetails)
		}
	}
	return params
}

func decodeGetAccountParams(args [0]string, argsEscaped bool, r *http.Request) (params GetAccountParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: accountType.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "accountType",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAccountTypeVal GetAccountAccountType
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotAccountTypeVal = GetAccountAccountType(c)
					return nil
				}(); err != nil {
					return err
				}
				params.AccountType.SetTo(paramsDotAccountTypeVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.AccountType.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "accountType",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: cvuAccountDetails.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "cvuAccountDetails",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "cuit", Required: false}, {Name: "cvu", Required: false}, {Name: "alias", Required: false}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotCvuAccountDetailsVal CvuAccountDetails
				if err := func() error {
					return paramsDotCvuAccountDetailsVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.CvuAccountDetails.SetTo(paramsDotCvuAccountDetailsVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.CvuAccountDetails.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "cvuAccountDetails",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: dinopayAccountDetails.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "dinopayAccountDetails",
			Style:   uri.QueryStyleDeepObject,
			Explode: true,
			Fields:  []uri.QueryParameterObjectField{{Name: "accountHolder", Required: true}, {Name: "accountNumber", Required: true}},
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotDinopayAccountDetailsVal DinopayAccountDetails
				if err := func() error {
					return paramsDotDinopayAccountDetailsVal.DecodeURI(d)
				}(); err != nil {
					return err
				}
				params.DinopayAccountDetails.SetTo(paramsDotDinopayAccountDetailsVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "dinopayAccountDetails",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// PostAccountParams is parameters of postAccount operation.
type PostAccountParams struct {
	// A UUID that allows to trace end-to-end transactions.
	XWalleteraCorrelationID OptUUID
}

func unpackPostAccountParams(packed middleware.Parameters) (params PostAccountParams) {
	{
		key := middleware.ParameterKey{
			Name: "X-Walletera-Correlation-Id",
			In:   "header",
		}
		if v, ok := packed[key]; ok {
			params.XWalleteraCorrelationID = v.(OptUUID)
		}
	}
	return params
}

func decodePostAccountParams(args [0]string, argsEscaped bool, r *http.Request) (params PostAccountParams, _ error) {
	h := uri.NewHeaderDecoder(r.Header)
	// Decode header: X-Walletera-Correlation-Id.
	if err := func() error {
		cfg := uri.HeaderParameterDecodingConfig{
			Name:    "X-Walletera-Correlation-Id",
			Explode: false,
		}
		if err := h.HasParam(cfg); err == nil {
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotXWalleteraCorrelationIDVal uuid.UUID
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToUUID(val)
					if err != nil {
						return err
					}

					paramsDotXWalleteraCorrelationIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.XWalleteraCorrelationID.SetTo(paramsDotXWalleteraCorrelationIDVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "X-Walletera-Correlation-Id",
			In:   "header",
			Err:  err,
		}
	}
	return params, nil
}
